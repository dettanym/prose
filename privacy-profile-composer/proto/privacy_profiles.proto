syntax = "proto3";
import "google/protobuf/empty.proto";
package privacy_profiles;

option go_package = "privacy-profile-composer/proto";

message SystemwideObservedProfile {
  purposeBasedProcessing systemwideProcessingEntries = 1;
  repeated string ComposedServicesInternalFQDNs = 2;
}

message SvcObservedProfile {
  string svcInternalFQDN = 1;
  // repeated map_api_path_to_processing api_path_to_processing = 7;
  purposeBasedProcessing observedProcessingEntries= 2;
}

//message map_api_path_to_processing {
//  string api_path = 1;
//  repeated data_item_and_third_parties  data_item_and_third_parties = 2;
//}

message purposeBasedProcessing {
  map<string, dataItemAndThirdParties> processingEntries = 1;
  //  PurposeOfUse purpose = 1;
  //  repeated dataItemAndThirdParties processing  = 2;
}

message dataItemAndThirdParties {
  map<string, thirdParties> entry = 1;
  //  PII_type dataItem = 1;
  //  repeated string thirdParties = 2;
}

message thirdParties {
  repeated string thirdParty = 1;
}

// Map keys can't be enums so we used strings for purposes and PII types.
enum PII_type {
  CREDIT_CARD = 0;
  NRP = 1;
  US_ITIN = 2;
  PERSON = 3;
  US_BANK_NUMBER = 4;
  US_PASSPORT = 5;
  IP_ADDRESS = 6;
  US_DRIVER_LICENSE = 7;
  CRYPTO = 8;
  URL = 9;
  PHONE_NUMBER = 10;
  IBAN_CODE = 11;
  DATE_TIME = 12;
  LOCATION = 13;
  EMAIL_ADDRESS = 14;
  US_SSN = 15;
}

enum PurposeOfUse {
  advertising = 0;
  authentication = 1;
  shipping = 2;
  payment = 3;
  marketing = 4;
}

service PrivacyProfileComposer {
  // Sends a greeting
  rpc PostObservedProfile (SvcObservedProfile) returns (google.protobuf.Empty) {}
  // Sends another greeting
  rpc GetSystemWideProfile (google.protobuf.Empty) returns (SystemwideObservedProfile) {}
}

